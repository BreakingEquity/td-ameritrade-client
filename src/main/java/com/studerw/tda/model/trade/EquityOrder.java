package com.studerw.tda.model.trade;

import java.math.BigDecimal;
import java.util.StringJoiner;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Positive;
import org.apache.commons.lang3.StringUtils;

/**
 * Request class used to send an equity order {@link com.studerw.tda.client.TdaClient#tradeEquity(EquityOrder)}.
 * Use the {@link EquityOrderBldr} instead of constructor.
 * There are no public setters as this class is intended to be immutable to users.
 *
 */
public class EquityOrder {
  private String clientOrderId;
  private String accountId;
  @NotNull(message = "Action cannot be empty - must be either 'sell', 'buy', 'sellshort' or 'buytocover'")
  private Action action;
  private BigDecimal actPrice;
  @Min(value = 100,  message="display size needs to be integer value 100 or higher, in increments of 100")
  private Integer displaySize;
  @NotNull(message="expire type is required, one of [day, moc, day_ext, gtc, gtc_ext, am, pm]")
  private Expire expire;
  //@Digits(integer = 2, fraction = 0)
  private Integer expireDay;
  //@Digits(integer = 2, fraction = 0)
  private Integer expireMonth;
  //@Digits(integer = 2, fraction = 0)
  private Integer expireYear;
  //@NotNull(message = "required - must be one of [market, limit, stop_market, stop_limit, tstoppercent, tstopdolla]")
  private OrderType orderType;
  private BigDecimal price;
  @NotNull(message="the quantity must be set to 1 or more")
  @Positive(message="Must have 1 or more for quantity")
  private Integer quantity;
  private Routing routing = Routing.auto;
  private SpecialInstruction specialInstruction = SpecialInstruction.none;
  @NotEmpty(message = "the equity symbol in uppercase (e.g. MSFT) is missing.")
  private String symbol;
  private String tsParam;


  private EquityOrder(){}

  /**
   * Generated by the client software. It gets returned in the response for order matching.
   * It is optional, but a handy way to keep track of orders internally.
   * @return id set by the client
   */
  public String getClientOrderId() {
    return clientOrderId;
  }

  /**
   * The Account ID of the account in which the trade is being made. If this is not set initially,
   * the default account id of the account will be used.
   * @return account id used for the order
   */
  public String getAccountId() {
    return accountId;
  }

  /**
   * Order action.
   * It is required and there is no default.
   * @return One of [sell, buy, sellshort, buytocover]
   */
  public Action getAction() {
    return action;
  }

  /**
   * @return The stop price for stop market or stop limit orders.
   */
  public BigDecimal getActPrice() {
    return actPrice;
  }

  /**
   * Must be of type integer value 100 or higher, in increments of 100.
   * @return Level II display size if routing is INET, otherwise null.
   */
  public Integer getDisplaySize() {
    return displaySize;
  }

  /**
   *
   * @return One of [day, moc, day_ext, gtc, gtc_ext, am, pm]
   */
  public Expire getExpire() {
    return expire;
  }

  /**
   *
   * @return Two digit expiration day, only specified if expire is set to gtc otherwise null
   */
  public Integer getExpireDay() {
    return expireDay;
  }

  /**
   *
   * @return Two digit expiration month, only specified if expire is set to gtc otherwise null.
   */
  public Integer getExpireMonth() {
    return expireMonth;
  }

  /**
   *
   * @return Two digit expiration year, only specified if expire is set to gtc otherwise null.
   */
  public Integer getExpireYear() {
    return expireYear;
  }

  /**
   * Case sensitive value for order type. It is required.
   * @return one of [market, limit, stop_market, stop_limit, tstoppercent, tstopdollar]
   */
  public OrderType getOrderType() {
    return orderType;
  }

  /**
   * @return Limit price for limit or stop limit orders otherwise null
   */
  public BigDecimal getPrice() {
    return price;
  }

  /**
   * @return The number of shares being bought or sold in the transaction
   */
  public Integer getQuantity() {
    return quantity;
  }

  /**
   * User specified order routing destination. Default is auto
   * @return one of [auto, inet, ecn_arca]
   */
  public Routing getRouting() {
    return routing;
  }

  /**
   * Special Instructions for the order execution. Set to none if not specified
   * @return one of [none, fok, aon, dnr, aon_dnr]
   */
  public SpecialInstruction getSpecialInstruction() {
    return specialInstruction;
  }

  /**
   * @return Equity symbol, should be uppercase, e.g. MSFT or VTSAX
   */
  public String getSymbol() {
    return StringUtils.upperCase(symbol);
  }

  /**
   * Trailing Stop parameter in dollars or percent depending on order type otherwise null.
   * @return trailing stop. In case of percent, 5 means 5 percent
   */
  public String getTsParam() {
    return tsParam;
  }

  void setClientOrderId(String clientOrderId) {
    this.clientOrderId = clientOrderId;
  }

  void setAccountId(String accountId) {
    this.accountId = accountId;
  }

  void setAction(Action action) {
    this.action = action;
  }

  void setActPrice(BigDecimal actPrice) {
    this.actPrice = actPrice;
  }

  void setDisplaySize(Integer displaySize) {
    this.displaySize = displaySize;
  }

  void setExpire(Expire expire) {
    this.expire = expire;
  }

  void setExpireDay(Integer expireDay) {
    this.expireDay = expireDay;
  }

  void setExpireMonth(Integer expireMonth) {
    this.expireMonth = expireMonth;
  }

  void setExpireYear(Integer expireYear) {
    this.expireYear = expireYear;
  }

  void setOrderType(OrderType orderType) {
    this.orderType = orderType;
  }

  void setPrice(BigDecimal price) {
    this.price = price;
  }

  void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }

  void setRouting(Routing routing) {
    this.routing = routing;
  }

  void setSpecialInstruction(SpecialInstruction specialInstruction) {
    this.specialInstruction = specialInstruction;
  }

  void setSymbol(String symbol) {
    this.symbol = symbol;
  }

  void setTsParam(String tsParam) {
    this.tsParam = tsParam;
  }

  @Override
  public String toString() {
    return new StringJoiner(", ", EquityOrder.class.getSimpleName() + "[", "]")
        .add("clientOrderId='" + clientOrderId + "'")
        .add("accountId='" + accountId + "'")
        .add("action=" + action)
        .add("actPrice=" + actPrice)
        .add("displaySize=" + displaySize)
        .add("expire=" + expire)
        .add("expireDay=" + expireDay)
        .add("expireMonth=" + expireMonth)
        .add("expireYear=" + expireYear)
        .add("orderType=" + orderType)
        .add("price=" + price)
        .add("quantity=" + quantity)
        .add("routing=" + routing)
        .add("specialInstruction=" + specialInstruction)
        .add("symbol='" + symbol + "'")
        .add("tsParam='" + tsParam + "'")
        .toString();
  }

  public static final class EquityOrderBldr {

    private String clientOrderId;
    private String accountId;
    private Action action;
    private BigDecimal actPrice;
    private Integer displaySize;
    private Expire expire;
    private Integer expireDay;
    private Integer expireMonth;
    private Integer expireYear;
    private OrderType orderType;
    private BigDecimal price;
    private Integer quantity;
    private Routing routing = Routing.auto;
    private SpecialInstruction specialInstruction = SpecialInstruction.none;
    private String symbol;
    private String tsParam;

    private EquityOrderBldr() {
    }

    public static EquityOrderBldr anEquityOrder() {
      return new EquityOrderBldr();
    }

    public EquityOrderBldr withClientOrderId(String clientOrderId) {
      this.clientOrderId = clientOrderId;
      return this;
    }

    public EquityOrderBldr withAccountId(String accountId) {
      this.accountId = accountId;
      return this;
    }

    public EquityOrderBldr withAction(Action action) {
      this.action = action;
      return this;
    }

    public EquityOrderBldr withActPrice(BigDecimal actPrice) {
      this.actPrice = actPrice;
      return this;
    }

    public EquityOrderBldr withDisplaySize(Integer displaySize) {
      this.displaySize = displaySize;
      return this;
    }

    public EquityOrderBldr withExpire(Expire expire) {
      this.expire = expire;
      return this;
    }

    public EquityOrderBldr withExpireDay(Integer expireDay) {
      this.expireDay = expireDay;
      return this;
    }

    public EquityOrderBldr withExpireMonth(Integer expireMonth) {
      this.expireMonth = expireMonth;
      return this;
    }

    public EquityOrderBldr withExpireYear(Integer expireYear) {
      this.expireYear = expireYear;
      return this;
    }

    public EquityOrderBldr withOrderType(OrderType orderType) {
      this.orderType = orderType;
      return this;
    }

    public EquityOrderBldr withPrice(BigDecimal price) {
      this.price = price;
      return this;
    }

    public EquityOrderBldr withQuantity(Integer quantity) {
      this.quantity = quantity;
      return this;
    }

    public EquityOrderBldr withRouting(Routing routing) {
      this.routing = routing;
      return this;
    }

    public EquityOrderBldr withSpecialInstruction(SpecialInstruction specialInstruction) {
      this.specialInstruction = specialInstruction;
      return this;
    }

    public EquityOrderBldr withSymbol(String symbol) {
      this.symbol = symbol;
      return this;
    }

    public EquityOrderBldr withTsParam(String tsParam) {
      this.tsParam = tsParam;
      return this;
    }

    public EquityOrder build() {
      EquityOrder equityOrder = new EquityOrder();
      equityOrder.actPrice = this.actPrice;
      equityOrder.specialInstruction = this.specialInstruction;
      equityOrder.price = this.price;
      equityOrder.clientOrderId = this.clientOrderId;
      equityOrder.symbol = this.symbol;
      equityOrder.expireDay = this.expireDay;
      equityOrder.orderType = this.orderType;
      equityOrder.displaySize = this.displaySize;
      equityOrder.routing = this.routing;
      equityOrder.accountId = this.accountId;
      equityOrder.action = this.action;
      equityOrder.quantity = this.quantity;
      equityOrder.expireYear = this.expireYear;
      equityOrder.expire = this.expire;
      equityOrder.expireMonth = this.expireMonth;
      equityOrder.tsParam = this.tsParam;
      return equityOrder;
    }
  }
}

